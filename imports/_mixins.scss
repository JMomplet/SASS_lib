/* ======================================== */
/* Properties with multiple vendor prefixes */
/* ======================================== */

/**
 * Shortcut to write in one line the opacity property for all browsers
 */
@mixin opacity($opacity) {
	filter: alpha(opacity=$opacity*100);
	opacity: $opacity;
}

/**
 * Shortcut to write in one line the transition property for all browsers
 */
@mixin transition($content...) {
	-webkit-transition: $content;
	-moz-transition: $content;
	-ms-transition: $content;
	-o-transition: $content;
	transition: $content;
}

/**
 * Shortcut to write in one line the border-radius property for all browsers
 */
@mixin border-radius($size) {
	-webkit-border-radius: $size;
	-moz-border-radius: $size;
	-o-border-radius: $size;
	border-radius: $size;
}

/**
 * Shortcut to write in one line the box-sizing property for all browsers
 */
@mixin box-sizing($option) {
	-webkit-box-sizing: $option;
	-moz-box-sizing: $option;
	box-sizing: $option;
}

/**
 * Alias for box-sizing(border-box);
 */
@mixin border-box {
	@include box-sizing(border-box);
}

/**
 * Shortcut to write in one line the box-shadow property for all browsers
 */
@mixin box-shadow($content...) {
	-webkit-box-shadow: #{$content};
	-moz-box-shadow: #{$content};
	box-shadow: #{$content};
}

/**
 * Shortcut to write in one line the transform property for all browsers
 */
@mixin transform($content...) {
	-webkit-transform: #{$content};
	-moz-transform: #{$content};
	-ms-transform: #{$content};
	-o-transform: #{$content};
	transform: #{$content};
}

/**
 * Shortcut to write in one line the background-clip property for all browsers
 */
@mixin background-clip($content) {
	-webkit-background-clip: #{$content};
	-moz-background-clip: #{$content};
	background-clip: #{$content};
}

/**
 * Makes an element non-selectable in all browsers
 */
@mixin non-selectable {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

/* ============= */
/* Various hacks */
/* ============= */

/**
 * Mixin to be able to set a RGBA color to the background-color of an element in IE
 */
@mixin ie-background-color-rgba($rgba) {
	$ie-hex: ie_hex_str($rgba);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex}, endColorstr=#{$ie-hex});
}

/**
 * Mixin to make easier to set a simple linear gradient as background-color for all browsers
 */
@mixin linear-gradient($init-pos, $first-color, $second-color) {
	$ie-first-color: ie_hex_str($first-color);
	$ie-second-color: ie_hex_str($second-color);

	background: $first-color; //Fallback

	background: -moz-linear-gradient(#{$init-pos}, $first-color 0%, $second-color 100%);
	@if($init-pos == "top"){
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $first-color), color-stop(100%, $second-color));
		background: linear-gradient(to bottom, $first-color 0%, $second-color 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$ie-first-color}', endColorstr='#{$ie-second-color}', GradientType=0);
	}
	@if($init-pos == "bottom") {
		background: -webkit-gradient(linear, left bottom, left top);
		background: linear-gradient(to top, $first-color 0%, $second-color 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$ie-second-color}', endColorstr='#{$ie-first-color}', GradientType=0);
	}
	@if($init-pos == "left") {
		background: -webkit-gradient(linear, left top, right top);
		background: linear-gradient(to right, $first-color 0%, $second-color 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$ie-first-color}', endColorstr='#{$ie-second-color}', GradientType=1);
	}
	@if($init-pos == "right") {
		background: -webkit-gradient(linear, right top, left top);
		background: linear-gradient(to left, $first-color 0%, $second-color 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$ie-second-color}', endColorstr='#{$ie-first-color}', GradientType=1);
	}
	background: -webkit-linear-gradient(#{$init-pos}, $first-color 0%, $second-color 100%);
	background: -o-linear-gradient(#{$init-pos}, $first-color 0%, $second-color 100%);
	background: -ms-linear-gradient(#{$init-pos}, $first-color 0%, $second-color 100%);
}

/**
 * Mixin to make easier to set a simple radial gradient as background-color for all browsers
 */
@mixin radial-gradient($init-pos, $first-color, $second-color) {
	$ie-first-color: ie_hex_str($first-color);
	$ie-second-color: ie_hex_str($second-color);

	background: $first-color; //Fallback

	background: -moz-radial-gradient($init-pos, ellipse cover, $first-color 0%, $second-color 100%);
	background: -webkit-gradient(radial, $init-pos $init-pos, 0px, $init-pos $init-pos, 100%, color-stop(0%, $first-color), color-stop(100%, $second-color));
	background: -webkit-radial-gradient($init-pos, ellipse cover, $first-color 0%, $second-color 100%);
	background: -o-radial-gradient($init-pos, ellipse cover, $first-color 0%, $second-color 100%);
	background: -ms-radial-gradient($init-pos, ellipse cover, $first-color 0%, $second-color 100%);
	background: radial-gradient(ellipse at $init-pos, $first-color 0%, $second-color 100%);

	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$ie-first-color}', endColorstr='#{$ie-second-color}', GradientType=0); //Fallback. Linear for IE6-9
}

/**
 * Mixin to make easier to use the clearfix hack
 */
@mixin clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

/* ============= */
/* Miscellaneous */
/* ============= */

/**
 * Makes easier to set the CSS necessary to make a box emboss effect
 */
@mixin box-emboss {
	@include box-shadow(0 1px 2px rgba(0, 0, 0, 0.25) inset, 0 1px 2px rgba(255, 255, 255, 0.1));
}

/**
 * Mixin to simplify making vertical menus with UL>LI
 *
 * @content To be able to set style to the inner LI element
 */
@mixin vertical-menu {
	list-style-type: none;
	padding: 0;
	margin: 0;
	overflow: hidden;
	> li {
		display: block;
		float: left;
		@content;
		&:last-child {
			margin-right: 0;
		}
	}
}

/**
 * An easy way of making an element a circle
 */
@mixin circle($diameter) {
	width: $diameter;
	height: $diameter;
	@include border-radius($diameter/2);
}

/**
 * Mixin to be able to set style to an element's placeholder with a unique declaration (cross-browser)
 */
@mixin placeholder {
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&::-webkit-input-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}

}

/**
 * Mixin to simplify the ::selection pseudo-element
 */
@mixin selection {
	&::-moz-selection {
		@content;
	}
	&::selection {
		@content;
	}
}


